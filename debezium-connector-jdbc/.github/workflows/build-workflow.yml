#
# Copyright Debezium Authors
#
# Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
#
name: Build/Test JDBC Sink

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'

jobs:

  # A single build cache step that downloads all maven dependencies and prepares a single cache
  # that will be shared across builds per sink database in the workflow matrix.
  build_cache:
    name: "Dependency cache"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core repository
        uses: actions/checkout@v3
        with:
          repository: debezium/debezium
          path: core
      - name: Checkout JDBC sink connector
        uses: actions/checkout@v3
        with:
          path: jdbc
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
      - name: Download dependencies
        run: >
          mvn -B -ntp clean install -Dformat.skip=true -Dcheckstyle.skip=true -DskipTests=true -DskipITs=true

  # Build step that checks out the source, builds, and includes the integration and the
  # end to end tests for DB2 as part of the build step.
  build_db2:
    name: Build and test (Db2)
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core repository
        uses: actions/checkout@v3
        with:
          repository: debezium/debezium
          path: core
      - name: Checkout JDBC sink connector
        uses: actions/checkout@v3
        with:
          path: jdbc
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
      - name: Build core
        run: mvn clean install -f core/pom.xml -DskipTests -DskipITs -Dformat.formatter.goal=validate -Dformat.imports.goal=check
      - name: Build sink
        run: mvn clean install -f jdbc/pom.xml -B -Passembly -Dtags=it-db2,e2e-db2 -Dsource.connectors=mysql,postgres,sqlserver

  # Build step that checks out the source, builds, and includes the integration and the
  # end to end tests for MySQL as part of the build step.
  build_mysql:
    name: Build and test (MySQL)
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core repository
        uses: actions/checkout@v3
        with:
          repository: debezium/debezium
          path: core
      - name: Checkout JDBC sink connector
        uses: actions/checkout@v3
        with:
          path: jdbc
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
      - name: Build core
        run: mvn clean install -f core/pom.xml -DskipTests -DskipITs -Dformat.formatter.goal=validate -Dformat.imports.goal=check
      - name: Build sink
        run: mvn clean install -f jdbc/pom.xml -B -Passembly -Dtags=it-mysql,e2e-mysql -Dsource.connectors=mysql,postgres,sqlserver

  # Build step that checks out the source, builds, and includes the integration and the
  # end to end tests for Oracle as part of the build step.
#  build_oracle:
#    name: Build and test (Oracle)
#    needs: [build_cache]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout core repository
#        uses: actions/checkout@v3
#        with:
#          repository: debezium/debezium
#          path: core
#      - name: Checkout JDBC sink connector
#        uses: actions/checkout@v3
#        with:
#          path: jdbc
#      - name: Set up Java 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: 17
#      - name: Cache maven repository
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
#          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
#      - name: Build core
#        run: mvn clean install -f core/pom.xml -DskipTests -DskipITs -Dformat.formatter.goal=validate -Dformat.imports.goal=check
#      - name: Build sink
#        run: mvn clean install -f jdbc/pom.xml -B -Passembly -Dtags=it-oracle,e2e-oracle -Dsource.connectors=mysql,postgres,sqlserver

  # Build step that checks out the source, builds, and includes the integration and the
  # end to end tests for PostgreSQL as part of the build step.
  build_postgresql:
    name: Build and test (PostgreSQL)
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core repository
        uses: actions/checkout@v3
        with:
          repository: debezium/debezium
          path: core
      - name: Checkout JDBC sink connector
        uses: actions/checkout@v3
        with:
          path: jdbc
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
      - name: Build core
        run: mvn clean install -f core/pom.xml -DskipTests -DskipITs -Dformat.formatter.goal=validate -Dformat.imports.goal=check
      - name: Build sink
        run: mvn clean install -f jdbc/pom.xml -B -Passembly -Dtags=it-postgresql,e2e-postgresql -Dsource.connectors=mysql,postgres,sqlserver

  # Build step that checks out the source, builds, and includes the integration and the
  # end to end tests for SQL Server as part of the build step.
  build_sqlserver:
    name: Build and test (SQL Server)
    needs: [build_cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core repository
        uses: actions/checkout@v3
        with:
          repository: debezium/debezium
          path: core
      - name: Checkout JDBC sink connector
        uses: actions/checkout@v3
        with:
          path: jdbc
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-debezium-connector-jdbc-build-${{ hashFiles('**/pom.xml') }}
      - name: Build core
        run: mvn clean install -f core/pom.xml -DskipTests -DskipITs -Dformat.formatter.goal=validate -Dformat.imports.goal=check
      - name: Build sink
        run: mvn clean install -f jdbc/pom.xml -B -Passembly -Dtags=it-sqlserver,e2e-sqlserver -Dsource.connectors=mysql,postgres,sqlserver

<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>io.debezium</groupId>
        <artifactId>debezium-storage</artifactId>
        <version>2.2.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>debezium-storage-jdbc</artifactId>
    <name>Debezium Storage JDBC Module</name>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>connect-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>connect-runtime</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Testing -->
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-core</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-ddl-parser</artifactId>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-connector-mysql</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-connector-mysql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-embedded</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-embedded</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.36.0.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-connect-avro-converter</artifactId>
            <version>7.3.1</version>
        </dependency>
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-schema-registry-client</artifactId>
            <version>7.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>mysql</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <properties>
        <!--
        Specify the properties for the various Docker containers.
        -->
        <mysql.user>mysqluser</mysql.user>
        <mysql.password>mysqlpw</mysql.password>
        <mysql.replica.user>mysqlreplica</mysql.replica.user>
        <mysql.replica.password>mysqlpw</mysql.replica.password>
        <mysql.port>3306</mysql.port>
        <mysql.percona.port>3306</mysql.percona.port>
        <mysql.gtid.port>3306</mysql.gtid.port>
        <mysql.gtid.replica.port>3306</mysql.gtid.replica.port>
        <mysql.ssl.port>3306</mysql.ssl.port>
        <mysql.replica.port>3306</mysql.replica.port> <!-- by default use primary as 'replica' -->
        <mysql.init.timeout>60000</mysql.init.timeout> <!-- 60 seconds -->
        <apicurio.port>8080</apicurio.port>
        <apicurio.init.timeout>60000</apicurio.init.timeout> <!-- 60 seconds -->
        <!--
        By default, we should use the docker image maintained by the MySQL team. This property is changed with different profiles.
        However, we run one container with GTIDs and one without.
        -->
        <docker.dbs>debezium/mysql-server-test-database</docker.dbs>
        <docker.filter>${docker.dbs}</docker.filter>
        <docker.skip>false</docker.skip>
        <docker.initimage>rm -f /etc/localtime; ln -s /usr/share/zoneinfo/US/Samoa /etc/localtime</docker.initimage>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <watchInterval>500</watchInterval>
                    <logDate>default</logDate>
                    <verbose>true</verbose>
                    <!--autoPull>always</autoPull-->
                    <images>
                    </images>
                </configuration>
                <!--
                Connect this plugin to the maven lifecycle around the integration-test phase:
                start the container in pre-integration-test and stop it in post-integration-test.
                -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
            Unlike surefire, the failsafe plugin ensures 'post-integration-test' phase always runs, even
            when there are failed integration tests. We rely upon this to always shut down the Docker container
            after the integration tests (defined as '*IT.java') are run.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <skipTests>${skipITs}</skipTests>
                    <enableAssertions>true</enableAssertions>
                    <systemPropertyVariables>
                        <!-- Make these available to the tests via system properties -->
                        <database.hostname>${docker.host.address}</database.hostname>
                        <database.port>${mysql.port}</database.port>
                        <database.user>${mysql.user}</database.user>
                        <database.password>${mysql.password}</database.password>
                        <database.replica.hostname>${docker.host.address}</database.replica.hostname>
                        <database.replica.port>${mysql.replica.port}</database.replica.port>
                        <skipLongRunningTests>${skipLongRunningTests}</skipLongRunningTests>
                    </systemPropertyVariables>
                    <runOrder>${runOrder}</runOrder>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
            </plugin>
        </plugins>
        <resources>
            <!-- Apply the properties set in the POM to the resource files -->
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>*</include>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>*</include>
                    <include>**/*</include>
                </includes>
            </testResource>
        </testResources>
    </build>
    <!--
    Define several useful profiles
    -->
    <profiles>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              This assembly profile is used during official builds. In addition to
              compiling, and running the unit and integration tests like the non-assembly
              profiles, this profile creates additional (like the connector plugin archives),
              starts up all three Docker containers (normal MySQL, MySQL+GTIDs, and alt-MySQL)
              and runs the integration tests against each of them.

              To use, specify "-Passembly" on the Maven command line.
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>assembly</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <!-- Run multiple images at the same time, but use different ports for all MySQL servers -->
                <docker.dbs>
                    debezium/mysql-server-test-database,debezium/mysql-server-gtids-test-database,debezium/mysql-server-gtids-test-database-replica,debezium/percona-server-test-database,debezium/mysql-server-test-database-ssl
                </docker.dbs>
                <mysql.port>4301</mysql.port>
                <mysql.gtid.port>4302</mysql.gtid.port>
                <mysql.gtid.replica.port>4303</mysql.gtid.replica.port>
                <mysql.percona.port>4304</mysql.percona.port>
                <mysql.ssl.port>4305</mysql.ssl.port>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>${version.assembly.plugin}</version>
                        <dependencies>
                            <dependency>
                                <groupId>io.debezium</groupId>
                                <artifactId>debezium-assembly-descriptors</artifactId>
                                <version>${project.version}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>default</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <finalName>${project.artifactId}-${project.version}</finalName>
                                    <attach>true</attach>  <!-- we want attach & deploy these to Maven -->
                                    <descriptorRefs>
                                        <descriptorRef>${assembly.descriptor}</descriptorRef>
                                    </descriptorRefs>
                                    <tarLongFileMode>posix</tarLongFileMode>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!--
                    Override the failsafe plugin to run the integration tests for each set of databases.
                    But make sure each database server is used only once ...
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${version.failsafe.plugin}</version>
                        <configuration>
                            <skipTests>${skipITs}</skipTests>
                            <enableAssertions>true</enableAssertions>
                            <systemPropertyVariables>
                                <!-- Make these available to the tests via system properties -->
                                <database.hostname>${docker.host.address}</database.hostname>
                                <database.user>${mysql.user}</database.user>
                                <database.password>${mysql.password}</database.password>
                                <database.replica.hostname>${docker.host.address}</database.replica.hostname>
                                <database.replica.user>${mysql.replica.user}</database.replica.user>
                                <database.replica.password>${mysql.replica.password}</database.replica.password>
                                <database.port>${mysql.port}</database.port>
                                <database.replica.port>${mysql.port}</database.replica.port>
                                <database.ssl.mode>disabled</database.ssl.mode>
                                <skipLongRunningTests>false</skipLongRunningTests>
                            </systemPropertyVariables>
                            <runOrder>${runOrder}</runOrder>
                        </configuration>
                        <executions>
                            <!-- First run the integration tests with the non-GTID server alone -->
                            <execution>
                                <id>integration-test-mysql</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <!-- same port for both, since we're only running one server -->
                                        <database.port>${mysql.port}</database.port>
                                        <database.replica.port>${mysql.port}</database.replica.port>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <!-- Then run the integration tests with the GTID server + replica server -->
                            <execution>
                                <id>integration-test-mysql-gtids-with-replica</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <database.port>${mysql.gtid.port}</database.port>
                                        <database.replica.port>${mysql.gtid.replica.port}</database.replica.port>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <!-- Then just Percona Server -->
                            <execution>
                                <id>integration-test-percona-server</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <!-- same port for both, since we're only running one server -->
                                        <database.port>${mysql.percona.port}</database.port>
                                        <database.replica.port>${mysql.percona.port}</database.replica.port>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <!-- SSL -->
                            <execution>
                                <id>integration-test-ssl</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <database.ssl.mode>verify_ca</database.ssl.mode>
                                        <database.ssl.truststore>${project.basedir}/src/test/resources/ssl/truststore</database.ssl.truststore>
                                        <database.ssl.truststore.password>debezium</database.ssl.truststore.password>
                                        <database.ssl.keystore>${project.basedir}/src/test/resources/ssl/keystore</database.ssl.keystore>
                                        <database.ssl.keystore.password>debezium</database.ssl.keystore.password>
                                        <!-- same port for both, since we're only running one server -->
                                        <database.port>${mysql.ssl.port}</database.port>
                                        <database.replica.port>${mysql.ssl.port}</database.replica.port>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Do not perform any Docker-related functionality
              To use, specify "-DskipITs" on the Maven command line.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>skip-integration-tests</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>skipITs</name>
                </property>
            </activation>
            <properties>
                <docker.skip>true</docker.skip>
            </properties>
        </profile>
        <profile>
            <id>quick</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>quick</name>
                </property>
            </activation>
            <properties>
                <skipITs>true</skipITs>
                <docker.skip>true</docker.skip>
            </properties>
        </profile>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Use the alternative Docker image for MySQL.
              To use, specify "-Dmysql-gtids" or -Pmysql-gtids on the Maven command line.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>mysql-gtids</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>mysql-gtids</name>
                </property>
            </activation>
            <properties>
                <!-- Docker properties -->
                <docker.dbs>debezium/mysql-server-gtids-test-database</docker.dbs>
                <!-- Integration test properties -->
                <database.port>${mysql.gtid.port}</database.port>
                <database.replica.port>${mysql.gtid.port}</database.replica.port>
            </properties>
        </profile>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Use the Docker image for Percona Server.
              To use, specify "-Dpercona-server" or -Ppercona-server on the Maven command line.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>percona-server</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>percona-server</name>
                </property>
            </activation>
            <properties>
                <!-- Docker properties -->
                <docker.dbs>debezium/percona-server-test-database</docker.dbs>
                <!-- Integration test properties -->
                <database.port>${mysql.percona.port}</database.port>
                <database.replica.port>${mysql.percona.port}</database.replica.port>
                <docker.initimage>ln -s /usr/share/zoneinfo/Pacific/Pago_Pago /etc/localtime</docker.initimage>
            </properties>
        </profile>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Use the Docker image for a MySQL replica of another MySQL server
        configured to use GTIDs. To use, specify "-Dmysql-replica"
        or -Pmysql-replica on the Maven command line.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

        <profile>
            <id>mysql-replica</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>mysql-replica</name>
                </property>
            </activation>
            <properties>
                <!-- Docker properties -->
                <mysql.gtid.port>3306</mysql.gtid.port>
                <mysql.gtid.replica.port>4306</mysql.gtid.replica.port>
                <docker.dbs>debezium/mysql-server-gtids-test-database,debezium/mysql-server-gtids-test-database-replica</docker.dbs>
                <!-- Integration test properties -->
                <database.port>${mysql.gtid.port}</database.port>
                <database.replica.port>${mysql.gtid.replica.port}</database.replica.port>
            </properties>
        </profile>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Use the alternative Docker image for MySQL.
        To use, specify "-Dmysql-ssl" or -Pmysql-ssl on the Maven command line.
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>mysql-ssl</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>mysql-ssl</name>
                </property>
            </activation>
            <properties>
                <!-- Docker properties -->
                <docker.dbs>debezium/mysql-server-test-database-ssl</docker.dbs>
                <!-- Integration test properties -->
                <database.port>${mysql.ssl.port}</database.port>
                <database.replica.port>${mysql.ssl.port}</database.replica.port>
                <docker.initimage>ln -s /usr/share/zoneinfo/Pacific/Pago_Pago /etc/localtime</docker.initimage>
            </properties>
        </profile>
        <profile>
            <id>apicurio</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>apicurio</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <use.apicurio>true</use.apicurio>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <docker.filter>${docker.dbs},apicurio/apicurio-registry-mem:${version.apicurio}</docker.filter>
            </properties>
        </profile>
    </profiles>
</project>

